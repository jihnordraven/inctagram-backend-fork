
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model GithubProfile
 * 
 */
export type GithubProfile = $Result.DefaultSelection<Prisma.$GithubProfilePayload>
/**
 * Model GoogleProfile
 * 
 */
export type GoogleProfile = $Result.DefaultSelection<Prisma.$GoogleProfilePayload>
/**
 * Model EmailCode
 * 
 */
export type EmailCode = $Result.DefaultSelection<Prisma.$EmailCodePayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs>;

  /**
   * `prisma.githubProfile`: Exposes CRUD operations for the **GithubProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GithubProfiles
    * const githubProfiles = await prisma.githubProfile.findMany()
    * ```
    */
  get githubProfile(): Prisma.GithubProfileDelegate<ExtArgs>;

  /**
   * `prisma.googleProfile`: Exposes CRUD operations for the **GoogleProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GoogleProfiles
    * const googleProfiles = await prisma.googleProfile.findMany()
    * ```
    */
  get googleProfile(): Prisma.GoogleProfileDelegate<ExtArgs>;

  /**
   * `prisma.emailCode`: Exposes CRUD operations for the **EmailCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailCodes
    * const emailCodes = await prisma.emailCode.findMany()
    * ```
    */
  get emailCode(): Prisma.EmailCodeDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.2.0
   * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Profile: 'Profile',
    GithubProfile: 'GithubProfile',
    GoogleProfile: 'GoogleProfile',
    EmailCode: 'EmailCode',
    Session: 'Session'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'profile' | 'githubProfile' | 'googleProfile' | 'emailCode' | 'session'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>,
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      GithubProfile: {
        payload: Prisma.$GithubProfilePayload<ExtArgs>
        fields: Prisma.GithubProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GithubProfileFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GithubProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GithubProfileFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GithubProfilePayload>
          }
          findFirst: {
            args: Prisma.GithubProfileFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GithubProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GithubProfileFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GithubProfilePayload>
          }
          findMany: {
            args: Prisma.GithubProfileFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GithubProfilePayload>[]
          }
          create: {
            args: Prisma.GithubProfileCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GithubProfilePayload>
          }
          createMany: {
            args: Prisma.GithubProfileCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GithubProfileDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GithubProfilePayload>
          }
          update: {
            args: Prisma.GithubProfileUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GithubProfilePayload>
          }
          deleteMany: {
            args: Prisma.GithubProfileDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GithubProfileUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GithubProfileUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GithubProfilePayload>
          }
          aggregate: {
            args: Prisma.GithubProfileAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGithubProfile>
          }
          groupBy: {
            args: Prisma.GithubProfileGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GithubProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.GithubProfileCountArgs<ExtArgs>,
            result: $Utils.Optional<GithubProfileCountAggregateOutputType> | number
          }
        }
      }
      GoogleProfile: {
        payload: Prisma.$GoogleProfilePayload<ExtArgs>
        fields: Prisma.GoogleProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoogleProfileFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoogleProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoogleProfileFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoogleProfilePayload>
          }
          findFirst: {
            args: Prisma.GoogleProfileFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoogleProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoogleProfileFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoogleProfilePayload>
          }
          findMany: {
            args: Prisma.GoogleProfileFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoogleProfilePayload>[]
          }
          create: {
            args: Prisma.GoogleProfileCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoogleProfilePayload>
          }
          createMany: {
            args: Prisma.GoogleProfileCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GoogleProfileDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoogleProfilePayload>
          }
          update: {
            args: Prisma.GoogleProfileUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoogleProfilePayload>
          }
          deleteMany: {
            args: Prisma.GoogleProfileDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GoogleProfileUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GoogleProfileUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GoogleProfilePayload>
          }
          aggregate: {
            args: Prisma.GoogleProfileAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGoogleProfile>
          }
          groupBy: {
            args: Prisma.GoogleProfileGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GoogleProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoogleProfileCountArgs<ExtArgs>,
            result: $Utils.Optional<GoogleProfileCountAggregateOutputType> | number
          }
        }
      }
      EmailCode: {
        payload: Prisma.$EmailCodePayload<ExtArgs>
        fields: Prisma.EmailCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailCodeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailCodeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCodePayload>
          }
          findFirst: {
            args: Prisma.EmailCodeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailCodeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCodePayload>
          }
          findMany: {
            args: Prisma.EmailCodeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCodePayload>[]
          }
          create: {
            args: Prisma.EmailCodeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCodePayload>
          }
          createMany: {
            args: Prisma.EmailCodeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EmailCodeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCodePayload>
          }
          update: {
            args: Prisma.EmailCodeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCodePayload>
          }
          deleteMany: {
            args: Prisma.EmailCodeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EmailCodeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EmailCodeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCodePayload>
          }
          aggregate: {
            args: Prisma.EmailCodeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEmailCode>
          }
          groupBy: {
            args: Prisma.EmailCodeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EmailCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailCodeCountArgs<ExtArgs>,
            result: $Utils.Optional<EmailCodeCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>,
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    EmailCodes: number
    Sessions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    EmailCodes?: boolean | UserCountOutputTypeCountEmailCodesArgs
    Sessions?: boolean | UserCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEmailCodesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EmailCodeWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    login: string | null
    email: string | null
    hashPassword: string | null
    createdAt: Date | null
    isConfirmed: boolean | null
    isBlocked: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    login: string | null
    email: string | null
    hashPassword: string | null
    createdAt: Date | null
    isConfirmed: boolean | null
    isBlocked: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    login: number
    email: number
    hashPassword: number
    createdAt: number
    isConfirmed: number
    isBlocked: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    login?: true
    email?: true
    hashPassword?: true
    createdAt?: true
    isConfirmed?: true
    isBlocked?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    login?: true
    email?: true
    hashPassword?: true
    createdAt?: true
    isConfirmed?: true
    isBlocked?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    login?: true
    email?: true
    hashPassword?: true
    createdAt?: true
    isConfirmed?: true
    isBlocked?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    login: string
    email: string
    hashPassword: string | null
    createdAt: Date
    isConfirmed: boolean
    isBlocked: boolean
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    login?: boolean
    email?: boolean
    hashPassword?: boolean
    createdAt?: boolean
    isConfirmed?: boolean
    isBlocked?: boolean
    EmailCodes?: boolean | User$EmailCodesArgs<ExtArgs>
    Sessions?: boolean | User$SessionsArgs<ExtArgs>
    Profile?: boolean | User$ProfileArgs<ExtArgs>
    GithubProfile?: boolean | User$GithubProfileArgs<ExtArgs>
    GoogleProfile?: boolean | User$GoogleProfileArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    login?: boolean
    email?: boolean
    hashPassword?: boolean
    createdAt?: boolean
    isConfirmed?: boolean
    isBlocked?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    EmailCodes?: boolean | User$EmailCodesArgs<ExtArgs>
    Sessions?: boolean | User$SessionsArgs<ExtArgs>
    Profile?: boolean | User$ProfileArgs<ExtArgs>
    GithubProfile?: boolean | User$GithubProfileArgs<ExtArgs>
    GoogleProfile?: boolean | User$GoogleProfileArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      EmailCodes: Prisma.$EmailCodePayload<ExtArgs>[]
      Sessions: Prisma.$SessionPayload<ExtArgs>[]
      Profile: Prisma.$ProfilePayload<ExtArgs> | null
      GithubProfile: Prisma.$GithubProfilePayload<ExtArgs> | null
      GoogleProfile: Prisma.$GoogleProfilePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: string
      login: string
      email: string
      hashPassword: string | null
      createdAt: Date
      isConfirmed: boolean
      isBlocked: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    EmailCodes<T extends User$EmailCodesArgs<ExtArgs> = {}>(args?: Subset<T, User$EmailCodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailCodePayload<ExtArgs>, T, 'findMany'> | Null>;

    Sessions<T extends User$SessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$SessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findMany'> | Null>;

    Profile<T extends User$ProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$ProfileArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    GithubProfile<T extends User$GithubProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$GithubProfileArgs<ExtArgs>>): Prisma__GithubProfileClient<$Result.GetResult<Prisma.$GithubProfilePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    GoogleProfile<T extends User$GoogleProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$GoogleProfileArgs<ExtArgs>>): Prisma__GoogleProfileClient<$Result.GetResult<Prisma.$GoogleProfilePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly login: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly hashPassword: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly isConfirmed: FieldRef<"User", 'Boolean'>
    readonly isBlocked: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.EmailCodes
   */
  export type User$EmailCodesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCode
     */
    select?: EmailCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailCodeInclude<ExtArgs> | null
    where?: EmailCodeWhereInput
    orderBy?: EmailCodeOrderByWithRelationInput | EmailCodeOrderByWithRelationInput[]
    cursor?: EmailCodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailCodeScalarFieldEnum | EmailCodeScalarFieldEnum[]
  }


  /**
   * User.Sessions
   */
  export type User$SessionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * User.Profile
   */
  export type User$ProfileArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }


  /**
   * User.GithubProfile
   */
  export type User$GithubProfileArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GithubProfile
     */
    select?: GithubProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GithubProfileInclude<ExtArgs> | null
    where?: GithubProfileWhereInput
  }


  /**
   * User.GoogleProfile
   */
  export type User$GoogleProfileArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleProfile
     */
    select?: GoogleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoogleProfileInclude<ExtArgs> | null
    where?: GoogleProfileWhereInput
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    avatarUrl: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    birthday: string | null
    city: string | null
    aboutMe: string | null
    userID: string | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    avatarUrl: string | null
    username: string | null
    firstName: string | null
    lastName: string | null
    birthday: string | null
    city: string | null
    aboutMe: string | null
    userID: string | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    avatarUrl: number
    username: number
    firstName: number
    lastName: number
    birthday: number
    city: number
    aboutMe: number
    userID: number
    _all: number
  }


  export type ProfileMinAggregateInputType = {
    id?: true
    avatarUrl?: true
    username?: true
    firstName?: true
    lastName?: true
    birthday?: true
    city?: true
    aboutMe?: true
    userID?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    avatarUrl?: true
    username?: true
    firstName?: true
    lastName?: true
    birthday?: true
    city?: true
    aboutMe?: true
    userID?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    avatarUrl?: true
    username?: true
    firstName?: true
    lastName?: true
    birthday?: true
    city?: true
    aboutMe?: true
    userID?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: string
    avatarUrl: string | null
    username: string
    firstName: string
    lastName: string
    birthday: string | null
    city: string | null
    aboutMe: string | null
    userID: string
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    avatarUrl?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    birthday?: boolean
    city?: boolean
    aboutMe?: boolean
    userID?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    avatarUrl?: boolean
    username?: boolean
    firstName?: boolean
    lastName?: boolean
    birthday?: boolean
    city?: boolean
    aboutMe?: boolean
    userID?: boolean
  }

  export type ProfileInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $ProfilePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      avatarUrl: string | null
      username: string
      firstName: string
      lastName: string
      birthday: string | null
      city: string | null
      aboutMe: string | null
      userID: string
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }


  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ProfileFindManyArgs, 'select' | 'include'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfileFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Profile that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfileFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfileFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Profiles.
     *     @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profile = await prisma.profile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfileCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Profile model
   */ 
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'String'>
    readonly avatarUrl: FieldRef<"Profile", 'String'>
    readonly username: FieldRef<"Profile", 'String'>
    readonly firstName: FieldRef<"Profile", 'String'>
    readonly lastName: FieldRef<"Profile", 'String'>
    readonly birthday: FieldRef<"Profile", 'String'>
    readonly city: FieldRef<"Profile", 'String'>
    readonly aboutMe: FieldRef<"Profile", 'String'>
    readonly userID: FieldRef<"Profile", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }


  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }


  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }


  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
  }


  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
  }



  /**
   * Model GithubProfile
   */

  export type AggregateGithubProfile = {
    _count: GithubProfileCountAggregateOutputType | null
    _min: GithubProfileMinAggregateOutputType | null
    _max: GithubProfileMaxAggregateOutputType | null
  }

  export type GithubProfileMinAggregateOutputType = {
    id: string | null
    providerID: string | null
    email: string | null
    userID: string | null
  }

  export type GithubProfileMaxAggregateOutputType = {
    id: string | null
    providerID: string | null
    email: string | null
    userID: string | null
  }

  export type GithubProfileCountAggregateOutputType = {
    id: number
    providerID: number
    email: number
    userID: number
    _all: number
  }


  export type GithubProfileMinAggregateInputType = {
    id?: true
    providerID?: true
    email?: true
    userID?: true
  }

  export type GithubProfileMaxAggregateInputType = {
    id?: true
    providerID?: true
    email?: true
    userID?: true
  }

  export type GithubProfileCountAggregateInputType = {
    id?: true
    providerID?: true
    email?: true
    userID?: true
    _all?: true
  }

  export type GithubProfileAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which GithubProfile to aggregate.
     */
    where?: GithubProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GithubProfiles to fetch.
     */
    orderBy?: GithubProfileOrderByWithRelationInput | GithubProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GithubProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GithubProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GithubProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GithubProfiles
    **/
    _count?: true | GithubProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GithubProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GithubProfileMaxAggregateInputType
  }

  export type GetGithubProfileAggregateType<T extends GithubProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateGithubProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGithubProfile[P]>
      : GetScalarType<T[P], AggregateGithubProfile[P]>
  }




  export type GithubProfileGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GithubProfileWhereInput
    orderBy?: GithubProfileOrderByWithAggregationInput | GithubProfileOrderByWithAggregationInput[]
    by: GithubProfileScalarFieldEnum[] | GithubProfileScalarFieldEnum
    having?: GithubProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GithubProfileCountAggregateInputType | true
    _min?: GithubProfileMinAggregateInputType
    _max?: GithubProfileMaxAggregateInputType
  }

  export type GithubProfileGroupByOutputType = {
    id: string
    providerID: string
    email: string
    userID: string
    _count: GithubProfileCountAggregateOutputType | null
    _min: GithubProfileMinAggregateOutputType | null
    _max: GithubProfileMaxAggregateOutputType | null
  }

  type GetGithubProfileGroupByPayload<T extends GithubProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GithubProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GithubProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GithubProfileGroupByOutputType[P]>
            : GetScalarType<T[P], GithubProfileGroupByOutputType[P]>
        }
      >
    >


  export type GithubProfileSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerID?: boolean
    email?: boolean
    userID?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["githubProfile"]>

  export type GithubProfileSelectScalar = {
    id?: boolean
    providerID?: boolean
    email?: boolean
    userID?: boolean
  }

  export type GithubProfileInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $GithubProfilePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "GithubProfile"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      providerID: string
      email: string
      userID: string
    }, ExtArgs["result"]["githubProfile"]>
    composites: {}
  }


  type GithubProfileGetPayload<S extends boolean | null | undefined | GithubProfileDefaultArgs> = $Result.GetResult<Prisma.$GithubProfilePayload, S>

  type GithubProfileCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<GithubProfileFindManyArgs, 'select' | 'include'> & {
      select?: GithubProfileCountAggregateInputType | true
    }

  export interface GithubProfileDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GithubProfile'], meta: { name: 'GithubProfile' } }
    /**
     * Find zero or one GithubProfile that matches the filter.
     * @param {GithubProfileFindUniqueArgs} args - Arguments to find a GithubProfile
     * @example
     * // Get one GithubProfile
     * const githubProfile = await prisma.githubProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GithubProfileFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GithubProfileFindUniqueArgs<ExtArgs>>
    ): Prisma__GithubProfileClient<$Result.GetResult<Prisma.$GithubProfilePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GithubProfile that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GithubProfileFindUniqueOrThrowArgs} args - Arguments to find a GithubProfile
     * @example
     * // Get one GithubProfile
     * const githubProfile = await prisma.githubProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GithubProfileFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GithubProfileFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GithubProfileClient<$Result.GetResult<Prisma.$GithubProfilePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GithubProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GithubProfileFindFirstArgs} args - Arguments to find a GithubProfile
     * @example
     * // Get one GithubProfile
     * const githubProfile = await prisma.githubProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GithubProfileFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GithubProfileFindFirstArgs<ExtArgs>>
    ): Prisma__GithubProfileClient<$Result.GetResult<Prisma.$GithubProfilePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GithubProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GithubProfileFindFirstOrThrowArgs} args - Arguments to find a GithubProfile
     * @example
     * // Get one GithubProfile
     * const githubProfile = await prisma.githubProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GithubProfileFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GithubProfileFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GithubProfileClient<$Result.GetResult<Prisma.$GithubProfilePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GithubProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GithubProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GithubProfiles
     * const githubProfiles = await prisma.githubProfile.findMany()
     * 
     * // Get first 10 GithubProfiles
     * const githubProfiles = await prisma.githubProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const githubProfileWithIdOnly = await prisma.githubProfile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GithubProfileFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GithubProfileFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GithubProfilePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GithubProfile.
     * @param {GithubProfileCreateArgs} args - Arguments to create a GithubProfile.
     * @example
     * // Create one GithubProfile
     * const GithubProfile = await prisma.githubProfile.create({
     *   data: {
     *     // ... data to create a GithubProfile
     *   }
     * })
     * 
    **/
    create<T extends GithubProfileCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GithubProfileCreateArgs<ExtArgs>>
    ): Prisma__GithubProfileClient<$Result.GetResult<Prisma.$GithubProfilePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GithubProfiles.
     *     @param {GithubProfileCreateManyArgs} args - Arguments to create many GithubProfiles.
     *     @example
     *     // Create many GithubProfiles
     *     const githubProfile = await prisma.githubProfile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GithubProfileCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GithubProfileCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GithubProfile.
     * @param {GithubProfileDeleteArgs} args - Arguments to delete one GithubProfile.
     * @example
     * // Delete one GithubProfile
     * const GithubProfile = await prisma.githubProfile.delete({
     *   where: {
     *     // ... filter to delete one GithubProfile
     *   }
     * })
     * 
    **/
    delete<T extends GithubProfileDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GithubProfileDeleteArgs<ExtArgs>>
    ): Prisma__GithubProfileClient<$Result.GetResult<Prisma.$GithubProfilePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GithubProfile.
     * @param {GithubProfileUpdateArgs} args - Arguments to update one GithubProfile.
     * @example
     * // Update one GithubProfile
     * const githubProfile = await prisma.githubProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GithubProfileUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GithubProfileUpdateArgs<ExtArgs>>
    ): Prisma__GithubProfileClient<$Result.GetResult<Prisma.$GithubProfilePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GithubProfiles.
     * @param {GithubProfileDeleteManyArgs} args - Arguments to filter GithubProfiles to delete.
     * @example
     * // Delete a few GithubProfiles
     * const { count } = await prisma.githubProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GithubProfileDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GithubProfileDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GithubProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GithubProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GithubProfiles
     * const githubProfile = await prisma.githubProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GithubProfileUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GithubProfileUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GithubProfile.
     * @param {GithubProfileUpsertArgs} args - Arguments to update or create a GithubProfile.
     * @example
     * // Update or create a GithubProfile
     * const githubProfile = await prisma.githubProfile.upsert({
     *   create: {
     *     // ... data to create a GithubProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GithubProfile we want to update
     *   }
     * })
    **/
    upsert<T extends GithubProfileUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GithubProfileUpsertArgs<ExtArgs>>
    ): Prisma__GithubProfileClient<$Result.GetResult<Prisma.$GithubProfilePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GithubProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GithubProfileCountArgs} args - Arguments to filter GithubProfiles to count.
     * @example
     * // Count the number of GithubProfiles
     * const count = await prisma.githubProfile.count({
     *   where: {
     *     // ... the filter for the GithubProfiles we want to count
     *   }
     * })
    **/
    count<T extends GithubProfileCountArgs>(
      args?: Subset<T, GithubProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GithubProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GithubProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GithubProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GithubProfileAggregateArgs>(args: Subset<T, GithubProfileAggregateArgs>): Prisma.PrismaPromise<GetGithubProfileAggregateType<T>>

    /**
     * Group by GithubProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GithubProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GithubProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GithubProfileGroupByArgs['orderBy'] }
        : { orderBy?: GithubProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GithubProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGithubProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GithubProfile model
   */
  readonly fields: GithubProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GithubProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GithubProfileClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the GithubProfile model
   */ 
  interface GithubProfileFieldRefs {
    readonly id: FieldRef<"GithubProfile", 'String'>
    readonly providerID: FieldRef<"GithubProfile", 'String'>
    readonly email: FieldRef<"GithubProfile", 'String'>
    readonly userID: FieldRef<"GithubProfile", 'String'>
  }
    

  // Custom InputTypes

  /**
   * GithubProfile findUnique
   */
  export type GithubProfileFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GithubProfile
     */
    select?: GithubProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GithubProfileInclude<ExtArgs> | null
    /**
     * Filter, which GithubProfile to fetch.
     */
    where: GithubProfileWhereUniqueInput
  }


  /**
   * GithubProfile findUniqueOrThrow
   */
  export type GithubProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GithubProfile
     */
    select?: GithubProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GithubProfileInclude<ExtArgs> | null
    /**
     * Filter, which GithubProfile to fetch.
     */
    where: GithubProfileWhereUniqueInput
  }


  /**
   * GithubProfile findFirst
   */
  export type GithubProfileFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GithubProfile
     */
    select?: GithubProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GithubProfileInclude<ExtArgs> | null
    /**
     * Filter, which GithubProfile to fetch.
     */
    where?: GithubProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GithubProfiles to fetch.
     */
    orderBy?: GithubProfileOrderByWithRelationInput | GithubProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GithubProfiles.
     */
    cursor?: GithubProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GithubProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GithubProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GithubProfiles.
     */
    distinct?: GithubProfileScalarFieldEnum | GithubProfileScalarFieldEnum[]
  }


  /**
   * GithubProfile findFirstOrThrow
   */
  export type GithubProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GithubProfile
     */
    select?: GithubProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GithubProfileInclude<ExtArgs> | null
    /**
     * Filter, which GithubProfile to fetch.
     */
    where?: GithubProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GithubProfiles to fetch.
     */
    orderBy?: GithubProfileOrderByWithRelationInput | GithubProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GithubProfiles.
     */
    cursor?: GithubProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GithubProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GithubProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GithubProfiles.
     */
    distinct?: GithubProfileScalarFieldEnum | GithubProfileScalarFieldEnum[]
  }


  /**
   * GithubProfile findMany
   */
  export type GithubProfileFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GithubProfile
     */
    select?: GithubProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GithubProfileInclude<ExtArgs> | null
    /**
     * Filter, which GithubProfiles to fetch.
     */
    where?: GithubProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GithubProfiles to fetch.
     */
    orderBy?: GithubProfileOrderByWithRelationInput | GithubProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GithubProfiles.
     */
    cursor?: GithubProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GithubProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GithubProfiles.
     */
    skip?: number
    distinct?: GithubProfileScalarFieldEnum | GithubProfileScalarFieldEnum[]
  }


  /**
   * GithubProfile create
   */
  export type GithubProfileCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GithubProfile
     */
    select?: GithubProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GithubProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a GithubProfile.
     */
    data: XOR<GithubProfileCreateInput, GithubProfileUncheckedCreateInput>
  }


  /**
   * GithubProfile createMany
   */
  export type GithubProfileCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GithubProfiles.
     */
    data: GithubProfileCreateManyInput | GithubProfileCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * GithubProfile update
   */
  export type GithubProfileUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GithubProfile
     */
    select?: GithubProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GithubProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a GithubProfile.
     */
    data: XOR<GithubProfileUpdateInput, GithubProfileUncheckedUpdateInput>
    /**
     * Choose, which GithubProfile to update.
     */
    where: GithubProfileWhereUniqueInput
  }


  /**
   * GithubProfile updateMany
   */
  export type GithubProfileUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GithubProfiles.
     */
    data: XOR<GithubProfileUpdateManyMutationInput, GithubProfileUncheckedUpdateManyInput>
    /**
     * Filter which GithubProfiles to update
     */
    where?: GithubProfileWhereInput
  }


  /**
   * GithubProfile upsert
   */
  export type GithubProfileUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GithubProfile
     */
    select?: GithubProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GithubProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the GithubProfile to update in case it exists.
     */
    where: GithubProfileWhereUniqueInput
    /**
     * In case the GithubProfile found by the `where` argument doesn't exist, create a new GithubProfile with this data.
     */
    create: XOR<GithubProfileCreateInput, GithubProfileUncheckedCreateInput>
    /**
     * In case the GithubProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GithubProfileUpdateInput, GithubProfileUncheckedUpdateInput>
  }


  /**
   * GithubProfile delete
   */
  export type GithubProfileDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GithubProfile
     */
    select?: GithubProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GithubProfileInclude<ExtArgs> | null
    /**
     * Filter which GithubProfile to delete.
     */
    where: GithubProfileWhereUniqueInput
  }


  /**
   * GithubProfile deleteMany
   */
  export type GithubProfileDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which GithubProfiles to delete
     */
    where?: GithubProfileWhereInput
  }


  /**
   * GithubProfile without action
   */
  export type GithubProfileDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GithubProfile
     */
    select?: GithubProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GithubProfileInclude<ExtArgs> | null
  }



  /**
   * Model GoogleProfile
   */

  export type AggregateGoogleProfile = {
    _count: GoogleProfileCountAggregateOutputType | null
    _min: GoogleProfileMinAggregateOutputType | null
    _max: GoogleProfileMaxAggregateOutputType | null
  }

  export type GoogleProfileMinAggregateOutputType = {
    id: string | null
    providerID: string | null
    email: string | null
    userID: string | null
  }

  export type GoogleProfileMaxAggregateOutputType = {
    id: string | null
    providerID: string | null
    email: string | null
    userID: string | null
  }

  export type GoogleProfileCountAggregateOutputType = {
    id: number
    providerID: number
    email: number
    userID: number
    _all: number
  }


  export type GoogleProfileMinAggregateInputType = {
    id?: true
    providerID?: true
    email?: true
    userID?: true
  }

  export type GoogleProfileMaxAggregateInputType = {
    id?: true
    providerID?: true
    email?: true
    userID?: true
  }

  export type GoogleProfileCountAggregateInputType = {
    id?: true
    providerID?: true
    email?: true
    userID?: true
    _all?: true
  }

  export type GoogleProfileAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoogleProfile to aggregate.
     */
    where?: GoogleProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoogleProfiles to fetch.
     */
    orderBy?: GoogleProfileOrderByWithRelationInput | GoogleProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoogleProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoogleProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoogleProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GoogleProfiles
    **/
    _count?: true | GoogleProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoogleProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoogleProfileMaxAggregateInputType
  }

  export type GetGoogleProfileAggregateType<T extends GoogleProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateGoogleProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoogleProfile[P]>
      : GetScalarType<T[P], AggregateGoogleProfile[P]>
  }




  export type GoogleProfileGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GoogleProfileWhereInput
    orderBy?: GoogleProfileOrderByWithAggregationInput | GoogleProfileOrderByWithAggregationInput[]
    by: GoogleProfileScalarFieldEnum[] | GoogleProfileScalarFieldEnum
    having?: GoogleProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoogleProfileCountAggregateInputType | true
    _min?: GoogleProfileMinAggregateInputType
    _max?: GoogleProfileMaxAggregateInputType
  }

  export type GoogleProfileGroupByOutputType = {
    id: string
    providerID: string
    email: string
    userID: string
    _count: GoogleProfileCountAggregateOutputType | null
    _min: GoogleProfileMinAggregateOutputType | null
    _max: GoogleProfileMaxAggregateOutputType | null
  }

  type GetGoogleProfileGroupByPayload<T extends GoogleProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoogleProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoogleProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoogleProfileGroupByOutputType[P]>
            : GetScalarType<T[P], GoogleProfileGroupByOutputType[P]>
        }
      >
    >


  export type GoogleProfileSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerID?: boolean
    email?: boolean
    userID?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["googleProfile"]>

  export type GoogleProfileSelectScalar = {
    id?: boolean
    providerID?: boolean
    email?: boolean
    userID?: boolean
  }

  export type GoogleProfileInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $GoogleProfilePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "GoogleProfile"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      providerID: string
      email: string
      userID: string
    }, ExtArgs["result"]["googleProfile"]>
    composites: {}
  }


  type GoogleProfileGetPayload<S extends boolean | null | undefined | GoogleProfileDefaultArgs> = $Result.GetResult<Prisma.$GoogleProfilePayload, S>

  type GoogleProfileCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<GoogleProfileFindManyArgs, 'select' | 'include'> & {
      select?: GoogleProfileCountAggregateInputType | true
    }

  export interface GoogleProfileDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GoogleProfile'], meta: { name: 'GoogleProfile' } }
    /**
     * Find zero or one GoogleProfile that matches the filter.
     * @param {GoogleProfileFindUniqueArgs} args - Arguments to find a GoogleProfile
     * @example
     * // Get one GoogleProfile
     * const googleProfile = await prisma.googleProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GoogleProfileFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GoogleProfileFindUniqueArgs<ExtArgs>>
    ): Prisma__GoogleProfileClient<$Result.GetResult<Prisma.$GoogleProfilePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GoogleProfile that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GoogleProfileFindUniqueOrThrowArgs} args - Arguments to find a GoogleProfile
     * @example
     * // Get one GoogleProfile
     * const googleProfile = await prisma.googleProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GoogleProfileFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GoogleProfileFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GoogleProfileClient<$Result.GetResult<Prisma.$GoogleProfilePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GoogleProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoogleProfileFindFirstArgs} args - Arguments to find a GoogleProfile
     * @example
     * // Get one GoogleProfile
     * const googleProfile = await prisma.googleProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GoogleProfileFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GoogleProfileFindFirstArgs<ExtArgs>>
    ): Prisma__GoogleProfileClient<$Result.GetResult<Prisma.$GoogleProfilePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GoogleProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoogleProfileFindFirstOrThrowArgs} args - Arguments to find a GoogleProfile
     * @example
     * // Get one GoogleProfile
     * const googleProfile = await prisma.googleProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GoogleProfileFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GoogleProfileFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GoogleProfileClient<$Result.GetResult<Prisma.$GoogleProfilePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GoogleProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoogleProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GoogleProfiles
     * const googleProfiles = await prisma.googleProfile.findMany()
     * 
     * // Get first 10 GoogleProfiles
     * const googleProfiles = await prisma.googleProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const googleProfileWithIdOnly = await prisma.googleProfile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GoogleProfileFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GoogleProfileFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoogleProfilePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GoogleProfile.
     * @param {GoogleProfileCreateArgs} args - Arguments to create a GoogleProfile.
     * @example
     * // Create one GoogleProfile
     * const GoogleProfile = await prisma.googleProfile.create({
     *   data: {
     *     // ... data to create a GoogleProfile
     *   }
     * })
     * 
    **/
    create<T extends GoogleProfileCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GoogleProfileCreateArgs<ExtArgs>>
    ): Prisma__GoogleProfileClient<$Result.GetResult<Prisma.$GoogleProfilePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GoogleProfiles.
     *     @param {GoogleProfileCreateManyArgs} args - Arguments to create many GoogleProfiles.
     *     @example
     *     // Create many GoogleProfiles
     *     const googleProfile = await prisma.googleProfile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GoogleProfileCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GoogleProfileCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GoogleProfile.
     * @param {GoogleProfileDeleteArgs} args - Arguments to delete one GoogleProfile.
     * @example
     * // Delete one GoogleProfile
     * const GoogleProfile = await prisma.googleProfile.delete({
     *   where: {
     *     // ... filter to delete one GoogleProfile
     *   }
     * })
     * 
    **/
    delete<T extends GoogleProfileDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GoogleProfileDeleteArgs<ExtArgs>>
    ): Prisma__GoogleProfileClient<$Result.GetResult<Prisma.$GoogleProfilePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GoogleProfile.
     * @param {GoogleProfileUpdateArgs} args - Arguments to update one GoogleProfile.
     * @example
     * // Update one GoogleProfile
     * const googleProfile = await prisma.googleProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GoogleProfileUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GoogleProfileUpdateArgs<ExtArgs>>
    ): Prisma__GoogleProfileClient<$Result.GetResult<Prisma.$GoogleProfilePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GoogleProfiles.
     * @param {GoogleProfileDeleteManyArgs} args - Arguments to filter GoogleProfiles to delete.
     * @example
     * // Delete a few GoogleProfiles
     * const { count } = await prisma.googleProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GoogleProfileDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GoogleProfileDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GoogleProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoogleProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GoogleProfiles
     * const googleProfile = await prisma.googleProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GoogleProfileUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GoogleProfileUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GoogleProfile.
     * @param {GoogleProfileUpsertArgs} args - Arguments to update or create a GoogleProfile.
     * @example
     * // Update or create a GoogleProfile
     * const googleProfile = await prisma.googleProfile.upsert({
     *   create: {
     *     // ... data to create a GoogleProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GoogleProfile we want to update
     *   }
     * })
    **/
    upsert<T extends GoogleProfileUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GoogleProfileUpsertArgs<ExtArgs>>
    ): Prisma__GoogleProfileClient<$Result.GetResult<Prisma.$GoogleProfilePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GoogleProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoogleProfileCountArgs} args - Arguments to filter GoogleProfiles to count.
     * @example
     * // Count the number of GoogleProfiles
     * const count = await prisma.googleProfile.count({
     *   where: {
     *     // ... the filter for the GoogleProfiles we want to count
     *   }
     * })
    **/
    count<T extends GoogleProfileCountArgs>(
      args?: Subset<T, GoogleProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoogleProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GoogleProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoogleProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoogleProfileAggregateArgs>(args: Subset<T, GoogleProfileAggregateArgs>): Prisma.PrismaPromise<GetGoogleProfileAggregateType<T>>

    /**
     * Group by GoogleProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoogleProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoogleProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoogleProfileGroupByArgs['orderBy'] }
        : { orderBy?: GoogleProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoogleProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoogleProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GoogleProfile model
   */
  readonly fields: GoogleProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GoogleProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoogleProfileClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the GoogleProfile model
   */ 
  interface GoogleProfileFieldRefs {
    readonly id: FieldRef<"GoogleProfile", 'String'>
    readonly providerID: FieldRef<"GoogleProfile", 'String'>
    readonly email: FieldRef<"GoogleProfile", 'String'>
    readonly userID: FieldRef<"GoogleProfile", 'String'>
  }
    

  // Custom InputTypes

  /**
   * GoogleProfile findUnique
   */
  export type GoogleProfileFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleProfile
     */
    select?: GoogleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoogleProfileInclude<ExtArgs> | null
    /**
     * Filter, which GoogleProfile to fetch.
     */
    where: GoogleProfileWhereUniqueInput
  }


  /**
   * GoogleProfile findUniqueOrThrow
   */
  export type GoogleProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleProfile
     */
    select?: GoogleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoogleProfileInclude<ExtArgs> | null
    /**
     * Filter, which GoogleProfile to fetch.
     */
    where: GoogleProfileWhereUniqueInput
  }


  /**
   * GoogleProfile findFirst
   */
  export type GoogleProfileFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleProfile
     */
    select?: GoogleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoogleProfileInclude<ExtArgs> | null
    /**
     * Filter, which GoogleProfile to fetch.
     */
    where?: GoogleProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoogleProfiles to fetch.
     */
    orderBy?: GoogleProfileOrderByWithRelationInput | GoogleProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoogleProfiles.
     */
    cursor?: GoogleProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoogleProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoogleProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoogleProfiles.
     */
    distinct?: GoogleProfileScalarFieldEnum | GoogleProfileScalarFieldEnum[]
  }


  /**
   * GoogleProfile findFirstOrThrow
   */
  export type GoogleProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleProfile
     */
    select?: GoogleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoogleProfileInclude<ExtArgs> | null
    /**
     * Filter, which GoogleProfile to fetch.
     */
    where?: GoogleProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoogleProfiles to fetch.
     */
    orderBy?: GoogleProfileOrderByWithRelationInput | GoogleProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoogleProfiles.
     */
    cursor?: GoogleProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoogleProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoogleProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoogleProfiles.
     */
    distinct?: GoogleProfileScalarFieldEnum | GoogleProfileScalarFieldEnum[]
  }


  /**
   * GoogleProfile findMany
   */
  export type GoogleProfileFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleProfile
     */
    select?: GoogleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoogleProfileInclude<ExtArgs> | null
    /**
     * Filter, which GoogleProfiles to fetch.
     */
    where?: GoogleProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoogleProfiles to fetch.
     */
    orderBy?: GoogleProfileOrderByWithRelationInput | GoogleProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GoogleProfiles.
     */
    cursor?: GoogleProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoogleProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoogleProfiles.
     */
    skip?: number
    distinct?: GoogleProfileScalarFieldEnum | GoogleProfileScalarFieldEnum[]
  }


  /**
   * GoogleProfile create
   */
  export type GoogleProfileCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleProfile
     */
    select?: GoogleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoogleProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a GoogleProfile.
     */
    data: XOR<GoogleProfileCreateInput, GoogleProfileUncheckedCreateInput>
  }


  /**
   * GoogleProfile createMany
   */
  export type GoogleProfileCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GoogleProfiles.
     */
    data: GoogleProfileCreateManyInput | GoogleProfileCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * GoogleProfile update
   */
  export type GoogleProfileUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleProfile
     */
    select?: GoogleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoogleProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a GoogleProfile.
     */
    data: XOR<GoogleProfileUpdateInput, GoogleProfileUncheckedUpdateInput>
    /**
     * Choose, which GoogleProfile to update.
     */
    where: GoogleProfileWhereUniqueInput
  }


  /**
   * GoogleProfile updateMany
   */
  export type GoogleProfileUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GoogleProfiles.
     */
    data: XOR<GoogleProfileUpdateManyMutationInput, GoogleProfileUncheckedUpdateManyInput>
    /**
     * Filter which GoogleProfiles to update
     */
    where?: GoogleProfileWhereInput
  }


  /**
   * GoogleProfile upsert
   */
  export type GoogleProfileUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleProfile
     */
    select?: GoogleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoogleProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the GoogleProfile to update in case it exists.
     */
    where: GoogleProfileWhereUniqueInput
    /**
     * In case the GoogleProfile found by the `where` argument doesn't exist, create a new GoogleProfile with this data.
     */
    create: XOR<GoogleProfileCreateInput, GoogleProfileUncheckedCreateInput>
    /**
     * In case the GoogleProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoogleProfileUpdateInput, GoogleProfileUncheckedUpdateInput>
  }


  /**
   * GoogleProfile delete
   */
  export type GoogleProfileDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleProfile
     */
    select?: GoogleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoogleProfileInclude<ExtArgs> | null
    /**
     * Filter which GoogleProfile to delete.
     */
    where: GoogleProfileWhereUniqueInput
  }


  /**
   * GoogleProfile deleteMany
   */
  export type GoogleProfileDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoogleProfiles to delete
     */
    where?: GoogleProfileWhereInput
  }


  /**
   * GoogleProfile without action
   */
  export type GoogleProfileDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleProfile
     */
    select?: GoogleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoogleProfileInclude<ExtArgs> | null
  }



  /**
   * Model EmailCode
   */

  export type AggregateEmailCode = {
    _count: EmailCodeCountAggregateOutputType | null
    _min: EmailCodeMinAggregateOutputType | null
    _max: EmailCodeMaxAggregateOutputType | null
  }

  export type EmailCodeMinAggregateOutputType = {
    id: string | null
    code: string | null
    expiresIn: Date | null
    userID: string | null
    isUsed: boolean | null
  }

  export type EmailCodeMaxAggregateOutputType = {
    id: string | null
    code: string | null
    expiresIn: Date | null
    userID: string | null
    isUsed: boolean | null
  }

  export type EmailCodeCountAggregateOutputType = {
    id: number
    code: number
    expiresIn: number
    userID: number
    isUsed: number
    _all: number
  }


  export type EmailCodeMinAggregateInputType = {
    id?: true
    code?: true
    expiresIn?: true
    userID?: true
    isUsed?: true
  }

  export type EmailCodeMaxAggregateInputType = {
    id?: true
    code?: true
    expiresIn?: true
    userID?: true
    isUsed?: true
  }

  export type EmailCodeCountAggregateInputType = {
    id?: true
    code?: true
    expiresIn?: true
    userID?: true
    isUsed?: true
    _all?: true
  }

  export type EmailCodeAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailCode to aggregate.
     */
    where?: EmailCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailCodes to fetch.
     */
    orderBy?: EmailCodeOrderByWithRelationInput | EmailCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailCodes
    **/
    _count?: true | EmailCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailCodeMaxAggregateInputType
  }

  export type GetEmailCodeAggregateType<T extends EmailCodeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailCode[P]>
      : GetScalarType<T[P], AggregateEmailCode[P]>
  }




  export type EmailCodeGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EmailCodeWhereInput
    orderBy?: EmailCodeOrderByWithAggregationInput | EmailCodeOrderByWithAggregationInput[]
    by: EmailCodeScalarFieldEnum[] | EmailCodeScalarFieldEnum
    having?: EmailCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailCodeCountAggregateInputType | true
    _min?: EmailCodeMinAggregateInputType
    _max?: EmailCodeMaxAggregateInputType
  }

  export type EmailCodeGroupByOutputType = {
    id: string
    code: string
    expiresIn: Date
    userID: string
    isUsed: boolean
    _count: EmailCodeCountAggregateOutputType | null
    _min: EmailCodeMinAggregateOutputType | null
    _max: EmailCodeMaxAggregateOutputType | null
  }

  type GetEmailCodeGroupByPayload<T extends EmailCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailCodeGroupByOutputType[P]>
            : GetScalarType<T[P], EmailCodeGroupByOutputType[P]>
        }
      >
    >


  export type EmailCodeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    expiresIn?: boolean
    userID?: boolean
    isUsed?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailCode"]>

  export type EmailCodeSelectScalar = {
    id?: boolean
    code?: boolean
    expiresIn?: boolean
    userID?: boolean
    isUsed?: boolean
  }

  export type EmailCodeInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $EmailCodePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "EmailCode"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      code: string
      expiresIn: Date
      userID: string
      isUsed: boolean
    }, ExtArgs["result"]["emailCode"]>
    composites: {}
  }


  type EmailCodeGetPayload<S extends boolean | null | undefined | EmailCodeDefaultArgs> = $Result.GetResult<Prisma.$EmailCodePayload, S>

  type EmailCodeCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<EmailCodeFindManyArgs, 'select' | 'include'> & {
      select?: EmailCodeCountAggregateInputType | true
    }

  export interface EmailCodeDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailCode'], meta: { name: 'EmailCode' } }
    /**
     * Find zero or one EmailCode that matches the filter.
     * @param {EmailCodeFindUniqueArgs} args - Arguments to find a EmailCode
     * @example
     * // Get one EmailCode
     * const emailCode = await prisma.emailCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmailCodeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EmailCodeFindUniqueArgs<ExtArgs>>
    ): Prisma__EmailCodeClient<$Result.GetResult<Prisma.$EmailCodePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one EmailCode that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EmailCodeFindUniqueOrThrowArgs} args - Arguments to find a EmailCode
     * @example
     * // Get one EmailCode
     * const emailCode = await prisma.emailCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EmailCodeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailCodeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EmailCodeClient<$Result.GetResult<Prisma.$EmailCodePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first EmailCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCodeFindFirstArgs} args - Arguments to find a EmailCode
     * @example
     * // Get one EmailCode
     * const emailCode = await prisma.emailCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmailCodeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailCodeFindFirstArgs<ExtArgs>>
    ): Prisma__EmailCodeClient<$Result.GetResult<Prisma.$EmailCodePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first EmailCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCodeFindFirstOrThrowArgs} args - Arguments to find a EmailCode
     * @example
     * // Get one EmailCode
     * const emailCode = await prisma.emailCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EmailCodeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailCodeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EmailCodeClient<$Result.GetResult<Prisma.$EmailCodePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more EmailCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCodeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailCodes
     * const emailCodes = await prisma.emailCode.findMany()
     * 
     * // Get first 10 EmailCodes
     * const emailCodes = await prisma.emailCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailCodeWithIdOnly = await prisma.emailCode.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EmailCodeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailCodeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailCodePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a EmailCode.
     * @param {EmailCodeCreateArgs} args - Arguments to create a EmailCode.
     * @example
     * // Create one EmailCode
     * const EmailCode = await prisma.emailCode.create({
     *   data: {
     *     // ... data to create a EmailCode
     *   }
     * })
     * 
    **/
    create<T extends EmailCodeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EmailCodeCreateArgs<ExtArgs>>
    ): Prisma__EmailCodeClient<$Result.GetResult<Prisma.$EmailCodePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many EmailCodes.
     *     @param {EmailCodeCreateManyArgs} args - Arguments to create many EmailCodes.
     *     @example
     *     // Create many EmailCodes
     *     const emailCode = await prisma.emailCode.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EmailCodeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailCodeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EmailCode.
     * @param {EmailCodeDeleteArgs} args - Arguments to delete one EmailCode.
     * @example
     * // Delete one EmailCode
     * const EmailCode = await prisma.emailCode.delete({
     *   where: {
     *     // ... filter to delete one EmailCode
     *   }
     * })
     * 
    **/
    delete<T extends EmailCodeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EmailCodeDeleteArgs<ExtArgs>>
    ): Prisma__EmailCodeClient<$Result.GetResult<Prisma.$EmailCodePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one EmailCode.
     * @param {EmailCodeUpdateArgs} args - Arguments to update one EmailCode.
     * @example
     * // Update one EmailCode
     * const emailCode = await prisma.emailCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmailCodeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EmailCodeUpdateArgs<ExtArgs>>
    ): Prisma__EmailCodeClient<$Result.GetResult<Prisma.$EmailCodePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more EmailCodes.
     * @param {EmailCodeDeleteManyArgs} args - Arguments to filter EmailCodes to delete.
     * @example
     * // Delete a few EmailCodes
     * const { count } = await prisma.emailCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmailCodeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailCodeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailCodes
     * const emailCode = await prisma.emailCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmailCodeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EmailCodeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmailCode.
     * @param {EmailCodeUpsertArgs} args - Arguments to update or create a EmailCode.
     * @example
     * // Update or create a EmailCode
     * const emailCode = await prisma.emailCode.upsert({
     *   create: {
     *     // ... data to create a EmailCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailCode we want to update
     *   }
     * })
    **/
    upsert<T extends EmailCodeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EmailCodeUpsertArgs<ExtArgs>>
    ): Prisma__EmailCodeClient<$Result.GetResult<Prisma.$EmailCodePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of EmailCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCodeCountArgs} args - Arguments to filter EmailCodes to count.
     * @example
     * // Count the number of EmailCodes
     * const count = await prisma.emailCode.count({
     *   where: {
     *     // ... the filter for the EmailCodes we want to count
     *   }
     * })
    **/
    count<T extends EmailCodeCountArgs>(
      args?: Subset<T, EmailCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailCodeAggregateArgs>(args: Subset<T, EmailCodeAggregateArgs>): Prisma.PrismaPromise<GetEmailCodeAggregateType<T>>

    /**
     * Group by EmailCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailCodeGroupByArgs['orderBy'] }
        : { orderBy?: EmailCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailCode model
   */
  readonly fields: EmailCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailCodeClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the EmailCode model
   */ 
  interface EmailCodeFieldRefs {
    readonly id: FieldRef<"EmailCode", 'String'>
    readonly code: FieldRef<"EmailCode", 'String'>
    readonly expiresIn: FieldRef<"EmailCode", 'DateTime'>
    readonly userID: FieldRef<"EmailCode", 'String'>
    readonly isUsed: FieldRef<"EmailCode", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * EmailCode findUnique
   */
  export type EmailCodeFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCode
     */
    select?: EmailCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailCodeInclude<ExtArgs> | null
    /**
     * Filter, which EmailCode to fetch.
     */
    where: EmailCodeWhereUniqueInput
  }


  /**
   * EmailCode findUniqueOrThrow
   */
  export type EmailCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCode
     */
    select?: EmailCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailCodeInclude<ExtArgs> | null
    /**
     * Filter, which EmailCode to fetch.
     */
    where: EmailCodeWhereUniqueInput
  }


  /**
   * EmailCode findFirst
   */
  export type EmailCodeFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCode
     */
    select?: EmailCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailCodeInclude<ExtArgs> | null
    /**
     * Filter, which EmailCode to fetch.
     */
    where?: EmailCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailCodes to fetch.
     */
    orderBy?: EmailCodeOrderByWithRelationInput | EmailCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailCodes.
     */
    cursor?: EmailCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailCodes.
     */
    distinct?: EmailCodeScalarFieldEnum | EmailCodeScalarFieldEnum[]
  }


  /**
   * EmailCode findFirstOrThrow
   */
  export type EmailCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCode
     */
    select?: EmailCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailCodeInclude<ExtArgs> | null
    /**
     * Filter, which EmailCode to fetch.
     */
    where?: EmailCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailCodes to fetch.
     */
    orderBy?: EmailCodeOrderByWithRelationInput | EmailCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailCodes.
     */
    cursor?: EmailCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailCodes.
     */
    distinct?: EmailCodeScalarFieldEnum | EmailCodeScalarFieldEnum[]
  }


  /**
   * EmailCode findMany
   */
  export type EmailCodeFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCode
     */
    select?: EmailCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailCodeInclude<ExtArgs> | null
    /**
     * Filter, which EmailCodes to fetch.
     */
    where?: EmailCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailCodes to fetch.
     */
    orderBy?: EmailCodeOrderByWithRelationInput | EmailCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailCodes.
     */
    cursor?: EmailCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailCodes.
     */
    skip?: number
    distinct?: EmailCodeScalarFieldEnum | EmailCodeScalarFieldEnum[]
  }


  /**
   * EmailCode create
   */
  export type EmailCodeCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCode
     */
    select?: EmailCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailCodeInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailCode.
     */
    data: XOR<EmailCodeCreateInput, EmailCodeUncheckedCreateInput>
  }


  /**
   * EmailCode createMany
   */
  export type EmailCodeCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailCodes.
     */
    data: EmailCodeCreateManyInput | EmailCodeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * EmailCode update
   */
  export type EmailCodeUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCode
     */
    select?: EmailCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailCodeInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailCode.
     */
    data: XOR<EmailCodeUpdateInput, EmailCodeUncheckedUpdateInput>
    /**
     * Choose, which EmailCode to update.
     */
    where: EmailCodeWhereUniqueInput
  }


  /**
   * EmailCode updateMany
   */
  export type EmailCodeUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailCodes.
     */
    data: XOR<EmailCodeUpdateManyMutationInput, EmailCodeUncheckedUpdateManyInput>
    /**
     * Filter which EmailCodes to update
     */
    where?: EmailCodeWhereInput
  }


  /**
   * EmailCode upsert
   */
  export type EmailCodeUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCode
     */
    select?: EmailCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailCodeInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailCode to update in case it exists.
     */
    where: EmailCodeWhereUniqueInput
    /**
     * In case the EmailCode found by the `where` argument doesn't exist, create a new EmailCode with this data.
     */
    create: XOR<EmailCodeCreateInput, EmailCodeUncheckedCreateInput>
    /**
     * In case the EmailCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailCodeUpdateInput, EmailCodeUncheckedUpdateInput>
  }


  /**
   * EmailCode delete
   */
  export type EmailCodeDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCode
     */
    select?: EmailCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailCodeInclude<ExtArgs> | null
    /**
     * Filter which EmailCode to delete.
     */
    where: EmailCodeWhereUniqueInput
  }


  /**
   * EmailCode deleteMany
   */
  export type EmailCodeDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailCodes to delete
     */
    where?: EmailCodeWhereInput
  }


  /**
   * EmailCode without action
   */
  export type EmailCodeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCode
     */
    select?: EmailCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmailCodeInclude<ExtArgs> | null
  }



  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    userID: string | null
    createdAt: Date | null
    expiresIn: Date | null
    userAgent: string | null
    userIP: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    userID: string | null
    createdAt: Date | null
    expiresIn: Date | null
    userAgent: string | null
    userIP: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userID: number
    createdAt: number
    expiresIn: number
    userAgent: number
    userIP: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    userID?: true
    createdAt?: true
    expiresIn?: true
    userAgent?: true
    userIP?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userID?: true
    createdAt?: true
    expiresIn?: true
    userAgent?: true
    userIP?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userID?: true
    createdAt?: true
    expiresIn?: true
    userAgent?: true
    userIP?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    userID: string
    createdAt: Date
    expiresIn: Date
    userAgent: string
    userIP: string
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    createdAt?: boolean
    expiresIn?: boolean
    userAgent?: boolean
    userIP?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    userID?: boolean
    createdAt?: boolean
    expiresIn?: boolean
    userAgent?: boolean
    userIP?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $SessionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      userID: string
      createdAt: Date
      expiresIn: Date
      userAgent: string
      userIP: string
    }, ExtArgs["result"]["session"]>
    composites: {}
  }


  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionCreateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly userID: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly expiresIn: FieldRef<"Session", 'DateTime'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly userIP: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    login: 'login',
    email: 'email',
    hashPassword: 'hashPassword',
    createdAt: 'createdAt',
    isConfirmed: 'isConfirmed',
    isBlocked: 'isBlocked'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    avatarUrl: 'avatarUrl',
    username: 'username',
    firstName: 'firstName',
    lastName: 'lastName',
    birthday: 'birthday',
    city: 'city',
    aboutMe: 'aboutMe',
    userID: 'userID'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const GithubProfileScalarFieldEnum: {
    id: 'id',
    providerID: 'providerID',
    email: 'email',
    userID: 'userID'
  };

  export type GithubProfileScalarFieldEnum = (typeof GithubProfileScalarFieldEnum)[keyof typeof GithubProfileScalarFieldEnum]


  export const GoogleProfileScalarFieldEnum: {
    id: 'id',
    providerID: 'providerID',
    email: 'email',
    userID: 'userID'
  };

  export type GoogleProfileScalarFieldEnum = (typeof GoogleProfileScalarFieldEnum)[keyof typeof GoogleProfileScalarFieldEnum]


  export const EmailCodeScalarFieldEnum: {
    id: 'id',
    code: 'code',
    expiresIn: 'expiresIn',
    userID: 'userID',
    isUsed: 'isUsed'
  };

  export type EmailCodeScalarFieldEnum = (typeof EmailCodeScalarFieldEnum)[keyof typeof EmailCodeScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userID: 'userID',
    createdAt: 'createdAt',
    expiresIn: 'expiresIn',
    userAgent: 'userAgent',
    userIP: 'userIP'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    login?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    hashPassword?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    isConfirmed?: BoolFilter<"User"> | boolean
    isBlocked?: BoolFilter<"User"> | boolean
    EmailCodes?: EmailCodeListRelationFilter
    Sessions?: SessionListRelationFilter
    Profile?: XOR<ProfileNullableRelationFilter, ProfileWhereInput> | null
    GithubProfile?: XOR<GithubProfileNullableRelationFilter, GithubProfileWhereInput> | null
    GoogleProfile?: XOR<GoogleProfileNullableRelationFilter, GoogleProfileWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    login?: SortOrder
    email?: SortOrder
    hashPassword?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    isConfirmed?: SortOrder
    isBlocked?: SortOrder
    EmailCodes?: EmailCodeOrderByRelationAggregateInput
    Sessions?: SessionOrderByRelationAggregateInput
    Profile?: ProfileOrderByWithRelationInput
    GithubProfile?: GithubProfileOrderByWithRelationInput
    GoogleProfile?: GoogleProfileOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    login?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    hashPassword?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    isConfirmed?: BoolFilter<"User"> | boolean
    isBlocked?: BoolFilter<"User"> | boolean
    EmailCodes?: EmailCodeListRelationFilter
    Sessions?: SessionListRelationFilter
    Profile?: XOR<ProfileNullableRelationFilter, ProfileWhereInput> | null
    GithubProfile?: XOR<GithubProfileNullableRelationFilter, GithubProfileWhereInput> | null
    GoogleProfile?: XOR<GoogleProfileNullableRelationFilter, GoogleProfileWhereInput> | null
  }, "id" | "id" | "login" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    login?: SortOrder
    email?: SortOrder
    hashPassword?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    isConfirmed?: SortOrder
    isBlocked?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    login?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    hashPassword?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    isConfirmed?: BoolWithAggregatesFilter<"User"> | boolean
    isBlocked?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: StringFilter<"Profile"> | string
    avatarUrl?: StringNullableFilter<"Profile"> | string | null
    username?: StringFilter<"Profile"> | string
    firstName?: StringFilter<"Profile"> | string
    lastName?: StringFilter<"Profile"> | string
    birthday?: StringNullableFilter<"Profile"> | string | null
    city?: StringNullableFilter<"Profile"> | string | null
    aboutMe?: StringNullableFilter<"Profile"> | string | null
    userID?: StringFilter<"Profile"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    birthday?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    aboutMe?: SortOrderInput | SortOrder
    userID?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    userID?: string
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    avatarUrl?: StringNullableFilter<"Profile"> | string | null
    firstName?: StringFilter<"Profile"> | string
    lastName?: StringFilter<"Profile"> | string
    birthday?: StringNullableFilter<"Profile"> | string | null
    city?: StringNullableFilter<"Profile"> | string | null
    aboutMe?: StringNullableFilter<"Profile"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "id" | "username" | "userID">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    birthday?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    aboutMe?: SortOrderInput | SortOrder
    userID?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Profile"> | string
    avatarUrl?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    username?: StringWithAggregatesFilter<"Profile"> | string
    firstName?: StringWithAggregatesFilter<"Profile"> | string
    lastName?: StringWithAggregatesFilter<"Profile"> | string
    birthday?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    city?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    aboutMe?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    userID?: StringWithAggregatesFilter<"Profile"> | string
  }

  export type GithubProfileWhereInput = {
    AND?: GithubProfileWhereInput | GithubProfileWhereInput[]
    OR?: GithubProfileWhereInput[]
    NOT?: GithubProfileWhereInput | GithubProfileWhereInput[]
    id?: StringFilter<"GithubProfile"> | string
    providerID?: StringFilter<"GithubProfile"> | string
    email?: StringFilter<"GithubProfile"> | string
    userID?: StringFilter<"GithubProfile"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type GithubProfileOrderByWithRelationInput = {
    id?: SortOrder
    providerID?: SortOrder
    email?: SortOrder
    userID?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type GithubProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    providerID?: string
    email?: string
    userID?: string
    AND?: GithubProfileWhereInput | GithubProfileWhereInput[]
    OR?: GithubProfileWhereInput[]
    NOT?: GithubProfileWhereInput | GithubProfileWhereInput[]
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "id" | "providerID" | "email" | "userID">

  export type GithubProfileOrderByWithAggregationInput = {
    id?: SortOrder
    providerID?: SortOrder
    email?: SortOrder
    userID?: SortOrder
    _count?: GithubProfileCountOrderByAggregateInput
    _max?: GithubProfileMaxOrderByAggregateInput
    _min?: GithubProfileMinOrderByAggregateInput
  }

  export type GithubProfileScalarWhereWithAggregatesInput = {
    AND?: GithubProfileScalarWhereWithAggregatesInput | GithubProfileScalarWhereWithAggregatesInput[]
    OR?: GithubProfileScalarWhereWithAggregatesInput[]
    NOT?: GithubProfileScalarWhereWithAggregatesInput | GithubProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GithubProfile"> | string
    providerID?: StringWithAggregatesFilter<"GithubProfile"> | string
    email?: StringWithAggregatesFilter<"GithubProfile"> | string
    userID?: StringWithAggregatesFilter<"GithubProfile"> | string
  }

  export type GoogleProfileWhereInput = {
    AND?: GoogleProfileWhereInput | GoogleProfileWhereInput[]
    OR?: GoogleProfileWhereInput[]
    NOT?: GoogleProfileWhereInput | GoogleProfileWhereInput[]
    id?: StringFilter<"GoogleProfile"> | string
    providerID?: StringFilter<"GoogleProfile"> | string
    email?: StringFilter<"GoogleProfile"> | string
    userID?: StringFilter<"GoogleProfile"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type GoogleProfileOrderByWithRelationInput = {
    id?: SortOrder
    providerID?: SortOrder
    email?: SortOrder
    userID?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type GoogleProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    providerID?: string
    email?: string
    userID?: string
    AND?: GoogleProfileWhereInput | GoogleProfileWhereInput[]
    OR?: GoogleProfileWhereInput[]
    NOT?: GoogleProfileWhereInput | GoogleProfileWhereInput[]
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "id" | "providerID" | "email" | "userID">

  export type GoogleProfileOrderByWithAggregationInput = {
    id?: SortOrder
    providerID?: SortOrder
    email?: SortOrder
    userID?: SortOrder
    _count?: GoogleProfileCountOrderByAggregateInput
    _max?: GoogleProfileMaxOrderByAggregateInput
    _min?: GoogleProfileMinOrderByAggregateInput
  }

  export type GoogleProfileScalarWhereWithAggregatesInput = {
    AND?: GoogleProfileScalarWhereWithAggregatesInput | GoogleProfileScalarWhereWithAggregatesInput[]
    OR?: GoogleProfileScalarWhereWithAggregatesInput[]
    NOT?: GoogleProfileScalarWhereWithAggregatesInput | GoogleProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GoogleProfile"> | string
    providerID?: StringWithAggregatesFilter<"GoogleProfile"> | string
    email?: StringWithAggregatesFilter<"GoogleProfile"> | string
    userID?: StringWithAggregatesFilter<"GoogleProfile"> | string
  }

  export type EmailCodeWhereInput = {
    AND?: EmailCodeWhereInput | EmailCodeWhereInput[]
    OR?: EmailCodeWhereInput[]
    NOT?: EmailCodeWhereInput | EmailCodeWhereInput[]
    id?: StringFilter<"EmailCode"> | string
    code?: StringFilter<"EmailCode"> | string
    expiresIn?: DateTimeFilter<"EmailCode"> | Date | string
    userID?: StringFilter<"EmailCode"> | string
    isUsed?: BoolFilter<"EmailCode"> | boolean
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type EmailCodeOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    expiresIn?: SortOrder
    userID?: SortOrder
    isUsed?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type EmailCodeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: EmailCodeWhereInput | EmailCodeWhereInput[]
    OR?: EmailCodeWhereInput[]
    NOT?: EmailCodeWhereInput | EmailCodeWhereInput[]
    expiresIn?: DateTimeFilter<"EmailCode"> | Date | string
    userID?: StringFilter<"EmailCode"> | string
    isUsed?: BoolFilter<"EmailCode"> | boolean
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "id" | "code">

  export type EmailCodeOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    expiresIn?: SortOrder
    userID?: SortOrder
    isUsed?: SortOrder
    _count?: EmailCodeCountOrderByAggregateInput
    _max?: EmailCodeMaxOrderByAggregateInput
    _min?: EmailCodeMinOrderByAggregateInput
  }

  export type EmailCodeScalarWhereWithAggregatesInput = {
    AND?: EmailCodeScalarWhereWithAggregatesInput | EmailCodeScalarWhereWithAggregatesInput[]
    OR?: EmailCodeScalarWhereWithAggregatesInput[]
    NOT?: EmailCodeScalarWhereWithAggregatesInput | EmailCodeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailCode"> | string
    code?: StringWithAggregatesFilter<"EmailCode"> | string
    expiresIn?: DateTimeWithAggregatesFilter<"EmailCode"> | Date | string
    userID?: StringWithAggregatesFilter<"EmailCode"> | string
    isUsed?: BoolWithAggregatesFilter<"EmailCode"> | boolean
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    userID?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    expiresIn?: DateTimeFilter<"Session"> | Date | string
    userAgent?: StringFilter<"Session"> | string
    userIP?: StringFilter<"Session"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
    expiresIn?: SortOrder
    userAgent?: SortOrder
    userIP?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userID?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    expiresIn?: DateTimeFilter<"Session"> | Date | string
    userAgent?: StringFilter<"Session"> | string
    userIP?: StringFilter<"Session"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
    expiresIn?: SortOrder
    userAgent?: SortOrder
    userIP?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    userID?: StringWithAggregatesFilter<"Session"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    expiresIn?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    userAgent?: StringWithAggregatesFilter<"Session"> | string
    userIP?: StringWithAggregatesFilter<"Session"> | string
  }

  export type UserCreateInput = {
    id?: string
    login: string
    email: string
    hashPassword?: string | null
    createdAt?: Date | string
    isConfirmed?: boolean
    isBlocked?: boolean
    EmailCodes?: EmailCodeCreateNestedManyWithoutUserInput
    Sessions?: SessionCreateNestedManyWithoutUserInput
    Profile?: ProfileCreateNestedOneWithoutUserInput
    GithubProfile?: GithubProfileCreateNestedOneWithoutUserInput
    GoogleProfile?: GoogleProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    login: string
    email: string
    hashPassword?: string | null
    createdAt?: Date | string
    isConfirmed?: boolean
    isBlocked?: boolean
    EmailCodes?: EmailCodeUncheckedCreateNestedManyWithoutUserInput
    Sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    GithubProfile?: GithubProfileUncheckedCreateNestedOneWithoutUserInput
    GoogleProfile?: GoogleProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashPassword?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    EmailCodes?: EmailCodeUpdateManyWithoutUserNestedInput
    Sessions?: SessionUpdateManyWithoutUserNestedInput
    Profile?: ProfileUpdateOneWithoutUserNestedInput
    GithubProfile?: GithubProfileUpdateOneWithoutUserNestedInput
    GoogleProfile?: GoogleProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashPassword?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    EmailCodes?: EmailCodeUncheckedUpdateManyWithoutUserNestedInput
    Sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    GithubProfile?: GithubProfileUncheckedUpdateOneWithoutUserNestedInput
    GoogleProfile?: GoogleProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    login: string
    email: string
    hashPassword?: string | null
    createdAt?: Date | string
    isConfirmed?: boolean
    isBlocked?: boolean
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashPassword?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashPassword?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProfileCreateInput = {
    id?: string
    avatarUrl?: string | null
    username: string
    firstName: string
    lastName: string
    birthday?: string | null
    city?: string | null
    aboutMe?: string | null
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    avatarUrl?: string | null
    username: string
    firstName: string
    lastName: string
    birthday?: string | null
    city?: string | null
    aboutMe?: string | null
    userID: string
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    aboutMe?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    aboutMe?: NullableStringFieldUpdateOperationsInput | string | null
    userID?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileCreateManyInput = {
    id?: string
    avatarUrl?: string | null
    username: string
    firstName: string
    lastName: string
    birthday?: string | null
    city?: string | null
    aboutMe?: string | null
    userID: string
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    aboutMe?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    aboutMe?: NullableStringFieldUpdateOperationsInput | string | null
    userID?: StringFieldUpdateOperationsInput | string
  }

  export type GithubProfileCreateInput = {
    id?: string
    providerID: string
    email: string
    User: UserCreateNestedOneWithoutGithubProfileInput
  }

  export type GithubProfileUncheckedCreateInput = {
    id?: string
    providerID: string
    email: string
    userID: string
  }

  export type GithubProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutGithubProfileNestedInput
  }

  export type GithubProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
  }

  export type GithubProfileCreateManyInput = {
    id?: string
    providerID: string
    email: string
    userID: string
  }

  export type GithubProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type GithubProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
  }

  export type GoogleProfileCreateInput = {
    id?: string
    providerID: string
    email: string
    User: UserCreateNestedOneWithoutGoogleProfileInput
  }

  export type GoogleProfileUncheckedCreateInput = {
    id?: string
    providerID: string
    email: string
    userID: string
  }

  export type GoogleProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutGoogleProfileNestedInput
  }

  export type GoogleProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
  }

  export type GoogleProfileCreateManyInput = {
    id?: string
    providerID: string
    email: string
    userID: string
  }

  export type GoogleProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type GoogleProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
  }

  export type EmailCodeCreateInput = {
    id?: string
    code: string
    expiresIn: Date | string
    isUsed?: boolean
    User: UserCreateNestedOneWithoutEmailCodesInput
  }

  export type EmailCodeUncheckedCreateInput = {
    id?: string
    code: string
    expiresIn: Date | string
    userID: string
    isUsed?: boolean
  }

  export type EmailCodeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneRequiredWithoutEmailCodesNestedInput
  }

  export type EmailCodeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: StringFieldUpdateOperationsInput | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmailCodeCreateManyInput = {
    id?: string
    code: string
    expiresIn: Date | string
    userID: string
    isUsed?: boolean
  }

  export type EmailCodeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmailCodeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: StringFieldUpdateOperationsInput | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionCreateInput = {
    id?: string
    createdAt?: Date | string
    expiresIn: Date | string
    userAgent: string
    userIP: string
    User: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    userID: string
    createdAt?: Date | string
    expiresIn: Date | string
    userAgent: string
    userIP: string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    userAgent?: StringFieldUpdateOperationsInput | string
    userIP?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    userAgent?: StringFieldUpdateOperationsInput | string
    userIP?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateManyInput = {
    id?: string
    userID: string
    createdAt?: Date | string
    expiresIn: Date | string
    userAgent: string
    userIP: string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    userAgent?: StringFieldUpdateOperationsInput | string
    userIP?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    userAgent?: StringFieldUpdateOperationsInput | string
    userIP?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EmailCodeListRelationFilter = {
    every?: EmailCodeWhereInput
    some?: EmailCodeWhereInput
    none?: EmailCodeWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type ProfileNullableRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type GithubProfileNullableRelationFilter = {
    is?: GithubProfileWhereInput | null
    isNot?: GithubProfileWhereInput | null
  }

  export type GoogleProfileNullableRelationFilter = {
    is?: GoogleProfileWhereInput | null
    isNot?: GoogleProfileWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EmailCodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    email?: SortOrder
    hashPassword?: SortOrder
    createdAt?: SortOrder
    isConfirmed?: SortOrder
    isBlocked?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    email?: SortOrder
    hashPassword?: SortOrder
    createdAt?: SortOrder
    isConfirmed?: SortOrder
    isBlocked?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    email?: SortOrder
    hashPassword?: SortOrder
    createdAt?: SortOrder
    isConfirmed?: SortOrder
    isBlocked?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    avatarUrl?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    birthday?: SortOrder
    city?: SortOrder
    aboutMe?: SortOrder
    userID?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    avatarUrl?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    birthday?: SortOrder
    city?: SortOrder
    aboutMe?: SortOrder
    userID?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    avatarUrl?: SortOrder
    username?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    birthday?: SortOrder
    city?: SortOrder
    aboutMe?: SortOrder
    userID?: SortOrder
  }

  export type GithubProfileCountOrderByAggregateInput = {
    id?: SortOrder
    providerID?: SortOrder
    email?: SortOrder
    userID?: SortOrder
  }

  export type GithubProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    providerID?: SortOrder
    email?: SortOrder
    userID?: SortOrder
  }

  export type GithubProfileMinOrderByAggregateInput = {
    id?: SortOrder
    providerID?: SortOrder
    email?: SortOrder
    userID?: SortOrder
  }

  export type GoogleProfileCountOrderByAggregateInput = {
    id?: SortOrder
    providerID?: SortOrder
    email?: SortOrder
    userID?: SortOrder
  }

  export type GoogleProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    providerID?: SortOrder
    email?: SortOrder
    userID?: SortOrder
  }

  export type GoogleProfileMinOrderByAggregateInput = {
    id?: SortOrder
    providerID?: SortOrder
    email?: SortOrder
    userID?: SortOrder
  }

  export type EmailCodeCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    expiresIn?: SortOrder
    userID?: SortOrder
    isUsed?: SortOrder
  }

  export type EmailCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    expiresIn?: SortOrder
    userID?: SortOrder
    isUsed?: SortOrder
  }

  export type EmailCodeMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    expiresIn?: SortOrder
    userID?: SortOrder
    isUsed?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
    expiresIn?: SortOrder
    userAgent?: SortOrder
    userIP?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
    expiresIn?: SortOrder
    userAgent?: SortOrder
    userIP?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    createdAt?: SortOrder
    expiresIn?: SortOrder
    userAgent?: SortOrder
    userIP?: SortOrder
  }

  export type EmailCodeCreateNestedManyWithoutUserInput = {
    create?: XOR<EmailCodeCreateWithoutUserInput, EmailCodeUncheckedCreateWithoutUserInput> | EmailCodeCreateWithoutUserInput[] | EmailCodeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailCodeCreateOrConnectWithoutUserInput | EmailCodeCreateOrConnectWithoutUserInput[]
    createMany?: EmailCodeCreateManyUserInputEnvelope
    connect?: EmailCodeWhereUniqueInput | EmailCodeWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type GithubProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<GithubProfileCreateWithoutUserInput, GithubProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: GithubProfileCreateOrConnectWithoutUserInput
    connect?: GithubProfileWhereUniqueInput
  }

  export type GoogleProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<GoogleProfileCreateWithoutUserInput, GoogleProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: GoogleProfileCreateOrConnectWithoutUserInput
    connect?: GoogleProfileWhereUniqueInput
  }

  export type EmailCodeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EmailCodeCreateWithoutUserInput, EmailCodeUncheckedCreateWithoutUserInput> | EmailCodeCreateWithoutUserInput[] | EmailCodeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailCodeCreateOrConnectWithoutUserInput | EmailCodeCreateOrConnectWithoutUserInput[]
    createMany?: EmailCodeCreateManyUserInputEnvelope
    connect?: EmailCodeWhereUniqueInput | EmailCodeWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type GithubProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<GithubProfileCreateWithoutUserInput, GithubProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: GithubProfileCreateOrConnectWithoutUserInput
    connect?: GithubProfileWhereUniqueInput
  }

  export type GoogleProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<GoogleProfileCreateWithoutUserInput, GoogleProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: GoogleProfileCreateOrConnectWithoutUserInput
    connect?: GoogleProfileWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EmailCodeUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmailCodeCreateWithoutUserInput, EmailCodeUncheckedCreateWithoutUserInput> | EmailCodeCreateWithoutUserInput[] | EmailCodeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailCodeCreateOrConnectWithoutUserInput | EmailCodeCreateOrConnectWithoutUserInput[]
    upsert?: EmailCodeUpsertWithWhereUniqueWithoutUserInput | EmailCodeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmailCodeCreateManyUserInputEnvelope
    set?: EmailCodeWhereUniqueInput | EmailCodeWhereUniqueInput[]
    disconnect?: EmailCodeWhereUniqueInput | EmailCodeWhereUniqueInput[]
    delete?: EmailCodeWhereUniqueInput | EmailCodeWhereUniqueInput[]
    connect?: EmailCodeWhereUniqueInput | EmailCodeWhereUniqueInput[]
    update?: EmailCodeUpdateWithWhereUniqueWithoutUserInput | EmailCodeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmailCodeUpdateManyWithWhereWithoutUserInput | EmailCodeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmailCodeScalarWhereInput | EmailCodeScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type ProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type GithubProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<GithubProfileCreateWithoutUserInput, GithubProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: GithubProfileCreateOrConnectWithoutUserInput
    upsert?: GithubProfileUpsertWithoutUserInput
    disconnect?: GithubProfileWhereInput | boolean
    delete?: GithubProfileWhereInput | boolean
    connect?: GithubProfileWhereUniqueInput
    update?: XOR<XOR<GithubProfileUpdateToOneWithWhereWithoutUserInput, GithubProfileUpdateWithoutUserInput>, GithubProfileUncheckedUpdateWithoutUserInput>
  }

  export type GoogleProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<GoogleProfileCreateWithoutUserInput, GoogleProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: GoogleProfileCreateOrConnectWithoutUserInput
    upsert?: GoogleProfileUpsertWithoutUserInput
    disconnect?: GoogleProfileWhereInput | boolean
    delete?: GoogleProfileWhereInput | boolean
    connect?: GoogleProfileWhereUniqueInput
    update?: XOR<XOR<GoogleProfileUpdateToOneWithWhereWithoutUserInput, GoogleProfileUpdateWithoutUserInput>, GoogleProfileUncheckedUpdateWithoutUserInput>
  }

  export type EmailCodeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmailCodeCreateWithoutUserInput, EmailCodeUncheckedCreateWithoutUserInput> | EmailCodeCreateWithoutUserInput[] | EmailCodeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailCodeCreateOrConnectWithoutUserInput | EmailCodeCreateOrConnectWithoutUserInput[]
    upsert?: EmailCodeUpsertWithWhereUniqueWithoutUserInput | EmailCodeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmailCodeCreateManyUserInputEnvelope
    set?: EmailCodeWhereUniqueInput | EmailCodeWhereUniqueInput[]
    disconnect?: EmailCodeWhereUniqueInput | EmailCodeWhereUniqueInput[]
    delete?: EmailCodeWhereUniqueInput | EmailCodeWhereUniqueInput[]
    connect?: EmailCodeWhereUniqueInput | EmailCodeWhereUniqueInput[]
    update?: EmailCodeUpdateWithWhereUniqueWithoutUserInput | EmailCodeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmailCodeUpdateManyWithWhereWithoutUserInput | EmailCodeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmailCodeScalarWhereInput | EmailCodeScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type GithubProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<GithubProfileCreateWithoutUserInput, GithubProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: GithubProfileCreateOrConnectWithoutUserInput
    upsert?: GithubProfileUpsertWithoutUserInput
    disconnect?: GithubProfileWhereInput | boolean
    delete?: GithubProfileWhereInput | boolean
    connect?: GithubProfileWhereUniqueInput
    update?: XOR<XOR<GithubProfileUpdateToOneWithWhereWithoutUserInput, GithubProfileUpdateWithoutUserInput>, GithubProfileUncheckedUpdateWithoutUserInput>
  }

  export type GoogleProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<GoogleProfileCreateWithoutUserInput, GoogleProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: GoogleProfileCreateOrConnectWithoutUserInput
    upsert?: GoogleProfileUpsertWithoutUserInput
    disconnect?: GoogleProfileWhereInput | boolean
    delete?: GoogleProfileWhereInput | boolean
    connect?: GoogleProfileWhereUniqueInput
    update?: XOR<XOR<GoogleProfileUpdateToOneWithWhereWithoutUserInput, GoogleProfileUpdateWithoutUserInput>, GoogleProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserCreateNestedOneWithoutGithubProfileInput = {
    create?: XOR<UserCreateWithoutGithubProfileInput, UserUncheckedCreateWithoutGithubProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutGithubProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutGithubProfileNestedInput = {
    create?: XOR<UserCreateWithoutGithubProfileInput, UserUncheckedCreateWithoutGithubProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutGithubProfileInput
    upsert?: UserUpsertWithoutGithubProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGithubProfileInput, UserUpdateWithoutGithubProfileInput>, UserUncheckedUpdateWithoutGithubProfileInput>
  }

  export type UserCreateNestedOneWithoutGoogleProfileInput = {
    create?: XOR<UserCreateWithoutGoogleProfileInput, UserUncheckedCreateWithoutGoogleProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoogleProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutGoogleProfileNestedInput = {
    create?: XOR<UserCreateWithoutGoogleProfileInput, UserUncheckedCreateWithoutGoogleProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutGoogleProfileInput
    upsert?: UserUpsertWithoutGoogleProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGoogleProfileInput, UserUpdateWithoutGoogleProfileInput>, UserUncheckedUpdateWithoutGoogleProfileInput>
  }

  export type UserCreateNestedOneWithoutEmailCodesInput = {
    create?: XOR<UserCreateWithoutEmailCodesInput, UserUncheckedCreateWithoutEmailCodesInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmailCodesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutEmailCodesNestedInput = {
    create?: XOR<UserCreateWithoutEmailCodesInput, UserUncheckedCreateWithoutEmailCodesInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmailCodesInput
    upsert?: UserUpsertWithoutEmailCodesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmailCodesInput, UserUpdateWithoutEmailCodesInput>, UserUncheckedUpdateWithoutEmailCodesInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EmailCodeCreateWithoutUserInput = {
    id?: string
    code: string
    expiresIn: Date | string
    isUsed?: boolean
  }

  export type EmailCodeUncheckedCreateWithoutUserInput = {
    id?: string
    code: string
    expiresIn: Date | string
    isUsed?: boolean
  }

  export type EmailCodeCreateOrConnectWithoutUserInput = {
    where: EmailCodeWhereUniqueInput
    create: XOR<EmailCodeCreateWithoutUserInput, EmailCodeUncheckedCreateWithoutUserInput>
  }

  export type EmailCodeCreateManyUserInputEnvelope = {
    data: EmailCodeCreateManyUserInput | EmailCodeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    expiresIn: Date | string
    userAgent: string
    userIP: string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    expiresIn: Date | string
    userAgent: string
    userIP: string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProfileCreateWithoutUserInput = {
    id?: string
    avatarUrl?: string | null
    username: string
    firstName: string
    lastName: string
    birthday?: string | null
    city?: string | null
    aboutMe?: string | null
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: string
    avatarUrl?: string | null
    username: string
    firstName: string
    lastName: string
    birthday?: string | null
    city?: string | null
    aboutMe?: string | null
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type GithubProfileCreateWithoutUserInput = {
    id?: string
    providerID: string
    email: string
  }

  export type GithubProfileUncheckedCreateWithoutUserInput = {
    id?: string
    providerID: string
    email: string
  }

  export type GithubProfileCreateOrConnectWithoutUserInput = {
    where: GithubProfileWhereUniqueInput
    create: XOR<GithubProfileCreateWithoutUserInput, GithubProfileUncheckedCreateWithoutUserInput>
  }

  export type GoogleProfileCreateWithoutUserInput = {
    id?: string
    providerID: string
    email: string
  }

  export type GoogleProfileUncheckedCreateWithoutUserInput = {
    id?: string
    providerID: string
    email: string
  }

  export type GoogleProfileCreateOrConnectWithoutUserInput = {
    where: GoogleProfileWhereUniqueInput
    create: XOR<GoogleProfileCreateWithoutUserInput, GoogleProfileUncheckedCreateWithoutUserInput>
  }

  export type EmailCodeUpsertWithWhereUniqueWithoutUserInput = {
    where: EmailCodeWhereUniqueInput
    update: XOR<EmailCodeUpdateWithoutUserInput, EmailCodeUncheckedUpdateWithoutUserInput>
    create: XOR<EmailCodeCreateWithoutUserInput, EmailCodeUncheckedCreateWithoutUserInput>
  }

  export type EmailCodeUpdateWithWhereUniqueWithoutUserInput = {
    where: EmailCodeWhereUniqueInput
    data: XOR<EmailCodeUpdateWithoutUserInput, EmailCodeUncheckedUpdateWithoutUserInput>
  }

  export type EmailCodeUpdateManyWithWhereWithoutUserInput = {
    where: EmailCodeScalarWhereInput
    data: XOR<EmailCodeUpdateManyMutationInput, EmailCodeUncheckedUpdateManyWithoutUserInput>
  }

  export type EmailCodeScalarWhereInput = {
    AND?: EmailCodeScalarWhereInput | EmailCodeScalarWhereInput[]
    OR?: EmailCodeScalarWhereInput[]
    NOT?: EmailCodeScalarWhereInput | EmailCodeScalarWhereInput[]
    id?: StringFilter<"EmailCode"> | string
    code?: StringFilter<"EmailCode"> | string
    expiresIn?: DateTimeFilter<"EmailCode"> | Date | string
    userID?: StringFilter<"EmailCode"> | string
    isUsed?: BoolFilter<"EmailCode"> | boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    userID?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    expiresIn?: DateTimeFilter<"Session"> | Date | string
    userAgent?: StringFilter<"Session"> | string
    userIP?: StringFilter<"Session"> | string
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    aboutMe?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    birthday?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    aboutMe?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GithubProfileUpsertWithoutUserInput = {
    update: XOR<GithubProfileUpdateWithoutUserInput, GithubProfileUncheckedUpdateWithoutUserInput>
    create: XOR<GithubProfileCreateWithoutUserInput, GithubProfileUncheckedCreateWithoutUserInput>
    where?: GithubProfileWhereInput
  }

  export type GithubProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: GithubProfileWhereInput
    data: XOR<GithubProfileUpdateWithoutUserInput, GithubProfileUncheckedUpdateWithoutUserInput>
  }

  export type GithubProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type GithubProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type GoogleProfileUpsertWithoutUserInput = {
    update: XOR<GoogleProfileUpdateWithoutUserInput, GoogleProfileUncheckedUpdateWithoutUserInput>
    create: XOR<GoogleProfileCreateWithoutUserInput, GoogleProfileUncheckedCreateWithoutUserInput>
    where?: GoogleProfileWhereInput
  }

  export type GoogleProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: GoogleProfileWhereInput
    data: XOR<GoogleProfileUpdateWithoutUserInput, GoogleProfileUncheckedUpdateWithoutUserInput>
  }

  export type GoogleProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type GoogleProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    login: string
    email: string
    hashPassword?: string | null
    createdAt?: Date | string
    isConfirmed?: boolean
    isBlocked?: boolean
    EmailCodes?: EmailCodeCreateNestedManyWithoutUserInput
    Sessions?: SessionCreateNestedManyWithoutUserInput
    GithubProfile?: GithubProfileCreateNestedOneWithoutUserInput
    GoogleProfile?: GoogleProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    login: string
    email: string
    hashPassword?: string | null
    createdAt?: Date | string
    isConfirmed?: boolean
    isBlocked?: boolean
    EmailCodes?: EmailCodeUncheckedCreateNestedManyWithoutUserInput
    Sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    GithubProfile?: GithubProfileUncheckedCreateNestedOneWithoutUserInput
    GoogleProfile?: GoogleProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashPassword?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    EmailCodes?: EmailCodeUpdateManyWithoutUserNestedInput
    Sessions?: SessionUpdateManyWithoutUserNestedInput
    GithubProfile?: GithubProfileUpdateOneWithoutUserNestedInput
    GoogleProfile?: GoogleProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashPassword?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    EmailCodes?: EmailCodeUncheckedUpdateManyWithoutUserNestedInput
    Sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    GithubProfile?: GithubProfileUncheckedUpdateOneWithoutUserNestedInput
    GoogleProfile?: GoogleProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutGithubProfileInput = {
    id?: string
    login: string
    email: string
    hashPassword?: string | null
    createdAt?: Date | string
    isConfirmed?: boolean
    isBlocked?: boolean
    EmailCodes?: EmailCodeCreateNestedManyWithoutUserInput
    Sessions?: SessionCreateNestedManyWithoutUserInput
    Profile?: ProfileCreateNestedOneWithoutUserInput
    GoogleProfile?: GoogleProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGithubProfileInput = {
    id?: string
    login: string
    email: string
    hashPassword?: string | null
    createdAt?: Date | string
    isConfirmed?: boolean
    isBlocked?: boolean
    EmailCodes?: EmailCodeUncheckedCreateNestedManyWithoutUserInput
    Sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    GoogleProfile?: GoogleProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGithubProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGithubProfileInput, UserUncheckedCreateWithoutGithubProfileInput>
  }

  export type UserUpsertWithoutGithubProfileInput = {
    update: XOR<UserUpdateWithoutGithubProfileInput, UserUncheckedUpdateWithoutGithubProfileInput>
    create: XOR<UserCreateWithoutGithubProfileInput, UserUncheckedCreateWithoutGithubProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGithubProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGithubProfileInput, UserUncheckedUpdateWithoutGithubProfileInput>
  }

  export type UserUpdateWithoutGithubProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashPassword?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    EmailCodes?: EmailCodeUpdateManyWithoutUserNestedInput
    Sessions?: SessionUpdateManyWithoutUserNestedInput
    Profile?: ProfileUpdateOneWithoutUserNestedInput
    GoogleProfile?: GoogleProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGithubProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashPassword?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    EmailCodes?: EmailCodeUncheckedUpdateManyWithoutUserNestedInput
    Sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    GoogleProfile?: GoogleProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutGoogleProfileInput = {
    id?: string
    login: string
    email: string
    hashPassword?: string | null
    createdAt?: Date | string
    isConfirmed?: boolean
    isBlocked?: boolean
    EmailCodes?: EmailCodeCreateNestedManyWithoutUserInput
    Sessions?: SessionCreateNestedManyWithoutUserInput
    Profile?: ProfileCreateNestedOneWithoutUserInput
    GithubProfile?: GithubProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGoogleProfileInput = {
    id?: string
    login: string
    email: string
    hashPassword?: string | null
    createdAt?: Date | string
    isConfirmed?: boolean
    isBlocked?: boolean
    EmailCodes?: EmailCodeUncheckedCreateNestedManyWithoutUserInput
    Sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    GithubProfile?: GithubProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGoogleProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGoogleProfileInput, UserUncheckedCreateWithoutGoogleProfileInput>
  }

  export type UserUpsertWithoutGoogleProfileInput = {
    update: XOR<UserUpdateWithoutGoogleProfileInput, UserUncheckedUpdateWithoutGoogleProfileInput>
    create: XOR<UserCreateWithoutGoogleProfileInput, UserUncheckedCreateWithoutGoogleProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGoogleProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGoogleProfileInput, UserUncheckedUpdateWithoutGoogleProfileInput>
  }

  export type UserUpdateWithoutGoogleProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashPassword?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    EmailCodes?: EmailCodeUpdateManyWithoutUserNestedInput
    Sessions?: SessionUpdateManyWithoutUserNestedInput
    Profile?: ProfileUpdateOneWithoutUserNestedInput
    GithubProfile?: GithubProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGoogleProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashPassword?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    EmailCodes?: EmailCodeUncheckedUpdateManyWithoutUserNestedInput
    Sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    GithubProfile?: GithubProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutEmailCodesInput = {
    id?: string
    login: string
    email: string
    hashPassword?: string | null
    createdAt?: Date | string
    isConfirmed?: boolean
    isBlocked?: boolean
    Sessions?: SessionCreateNestedManyWithoutUserInput
    Profile?: ProfileCreateNestedOneWithoutUserInput
    GithubProfile?: GithubProfileCreateNestedOneWithoutUserInput
    GoogleProfile?: GoogleProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEmailCodesInput = {
    id?: string
    login: string
    email: string
    hashPassword?: string | null
    createdAt?: Date | string
    isConfirmed?: boolean
    isBlocked?: boolean
    Sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    GithubProfile?: GithubProfileUncheckedCreateNestedOneWithoutUserInput
    GoogleProfile?: GoogleProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEmailCodesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmailCodesInput, UserUncheckedCreateWithoutEmailCodesInput>
  }

  export type UserUpsertWithoutEmailCodesInput = {
    update: XOR<UserUpdateWithoutEmailCodesInput, UserUncheckedUpdateWithoutEmailCodesInput>
    create: XOR<UserCreateWithoutEmailCodesInput, UserUncheckedCreateWithoutEmailCodesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmailCodesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmailCodesInput, UserUncheckedUpdateWithoutEmailCodesInput>
  }

  export type UserUpdateWithoutEmailCodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashPassword?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    Sessions?: SessionUpdateManyWithoutUserNestedInput
    Profile?: ProfileUpdateOneWithoutUserNestedInput
    GithubProfile?: GithubProfileUpdateOneWithoutUserNestedInput
    GoogleProfile?: GoogleProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEmailCodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashPassword?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    Sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    GithubProfile?: GithubProfileUncheckedUpdateOneWithoutUserNestedInput
    GoogleProfile?: GoogleProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    login: string
    email: string
    hashPassword?: string | null
    createdAt?: Date | string
    isConfirmed?: boolean
    isBlocked?: boolean
    EmailCodes?: EmailCodeCreateNestedManyWithoutUserInput
    Profile?: ProfileCreateNestedOneWithoutUserInput
    GithubProfile?: GithubProfileCreateNestedOneWithoutUserInput
    GoogleProfile?: GoogleProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    login: string
    email: string
    hashPassword?: string | null
    createdAt?: Date | string
    isConfirmed?: boolean
    isBlocked?: boolean
    EmailCodes?: EmailCodeUncheckedCreateNestedManyWithoutUserInput
    Profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    GithubProfile?: GithubProfileUncheckedCreateNestedOneWithoutUserInput
    GoogleProfile?: GoogleProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashPassword?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    EmailCodes?: EmailCodeUpdateManyWithoutUserNestedInput
    Profile?: ProfileUpdateOneWithoutUserNestedInput
    GithubProfile?: GithubProfileUpdateOneWithoutUserNestedInput
    GoogleProfile?: GoogleProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    login?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashPassword?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    EmailCodes?: EmailCodeUncheckedUpdateManyWithoutUserNestedInput
    Profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    GithubProfile?: GithubProfileUncheckedUpdateOneWithoutUserNestedInput
    GoogleProfile?: GoogleProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type EmailCodeCreateManyUserInput = {
    id?: string
    code: string
    expiresIn: Date | string
    isUsed?: boolean
  }

  export type SessionCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    expiresIn: Date | string
    userAgent: string
    userIP: string
  }

  export type EmailCodeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmailCodeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmailCodeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    userAgent?: StringFieldUpdateOperationsInput | string
    userIP?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    userAgent?: StringFieldUpdateOperationsInput | string
    userIP?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    userAgent?: StringFieldUpdateOperationsInput | string
    userIP?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfileDefaultArgs instead
     */
    export type ProfileArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GithubProfileDefaultArgs instead
     */
    export type GithubProfileArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = GithubProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GoogleProfileDefaultArgs instead
     */
    export type GoogleProfileArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = GoogleProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmailCodeDefaultArgs instead
     */
    export type EmailCodeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = EmailCodeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}