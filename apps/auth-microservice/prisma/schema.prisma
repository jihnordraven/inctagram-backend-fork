generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @unique @default(uuid())
  login        String   @unique
  email        String   @unique
  hashPassword String?  @map("hash_password")
  createdAt    DateTime @default(now()) @map("created_at")
  isConfirmed  Boolean  @default(false) @map("is_confirmed")
  isBlocked    Boolean  @default(false) @map("is_blocked")

  EmailCodes EmailCode[]
  Sessions   Session[]

  Profile       Profile?
  GithubProfile GithubProfile?
  GoogleProfile GoogleProfile?

  @@map("users")
}

model Profile {
  id        String  @id @unique @default(uuid())
  avatarUrl String? @map("avatar_url")
  username  String  @unique
  firstName String
  lastName  String
  birthday  String?
  city      String?
  aboutMe   String? @map("about_me")
  userID    String  @unique @map("user_id")
  user      User    @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("profiles")
}

model GithubProfile {
  id         String @id @unique @default(uuid())
  providerID String @unique @map("provider_id")
  email      String @unique
  userID     String @unique @map("user_ID")
  User       User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("github_profiles")
}

model GoogleProfile {
  id         String @id @unique @default(uuid())
  providerID String @unique @map("provider_id")
  email      String @unique
  userID     String @unique @map("user_id")
  User       User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("google_profiles")
}

model EmailCode {
  id        String   @id @unique @default(uuid())
  code      String   @unique
  expiresIn DateTime @map("expires_in")
  userID    String   @map("user_id")
  isUsed    Boolean  @default(false) @map("is_used")
  User      User     @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("email_codes")
}

model Session {
  id        String   @id @unique @default(uuid())
  userID    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  expiresIn DateTime @map("expires_in")
  userAgent String   @map("user_agent")
  userIP    String   @map("user_ip")
  User      User     @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("sessions")
}
